---
title: "Grade Calculator with Options"
format: html
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

library(shiny)
library(bslib)

# Define UI for the application
ui <- fluidPage(
  titlePanel("Welcome to Grade Calculator with Options"),
  p("This will help you project your final grade based on your current/predicted scores."),
  sidebarLayout(
    sidebarPanel(
      h4("Select Calculation Option:"),
      radioButtons(
        "calc_option",
        "Calculation Method:",
        choices = list(
          "Option 1: Average of two exams" = "option1",
          "Option 2: Replace with final exam score" = "option2"
        ),
        selected = "option1"
      ),
      h4("Enter your grades (between 0 and 100):"),
      numericInput("assignment1", "Assignment 1:", value = 85, min = 0, max = 100, step = 1),
      numericInput("skilltest1", "Skill Test 1:", value = 85, min = 0, max = 100, step = 1),
      numericInput("exam1", "Exam 1:", value = 85, min = 0, max = 100, step = 1),
      numericInput("assignment2", "Assignment 2:", value = 85, min = 0, max = 100, step = 1),
      numericInput("skilltest2", "Skill Test 2:", value = 85, min = 0, max = 100, step = 1),
      numericInput("exam2", "Exam 2:", value = 85, min = 0, max = 100, step = 1),
      numericInput("final_exam", "Final Exam:", value = 85, min = 0, max = 100, step = 1),
      numericInput("learning", "Learning Participation:", value = 85, min = 0, max = 100, step = 1)
    ),
    mainPanel(
      h3("Your Results"),
      h4("Based on the scores you entered, your Final Grade is:"),
      uiOutput("finalGrade"),
      h4("Based on the scores you entered, your Letter Grade is:"),
      uiOutput("letterGrade"),
      h4("Feedback:"),
      uiOutput("feedback")
    )
  )
)

# Define server logic for the application
server <- function(input, output, session) {
  # Reactive expression to calculate the final grade
  finalGrade <- reactive({
    # Weights from the Excel file
    weights <- c(0.04, 0.15, 0.12, 0.04, 0.2, 0.15, 0.18, 0.12)
    
    # Input grades
    grades <- c(
      input$assignment1, input$skilltest1, input$exam1,
      input$assignment2, input$skilltest2, input$exam2,
      input$final_exam, input$learning
    )
    
    # Ensure grades are within range
    grades <- pmax(pmin(grades, 100), 0)
    
    # Apply calculation logic based on the selected option
    if (input$calc_option == "option1") {
      grades[7] <- mean(c(grades[3], grades[6])) # Replace final exam with average of Exam1 and Exam2
    }
    
    # Calculate weighted final grade
    round(sum(grades * weights), 2)
  })
  
  output$finalGrade <- renderUI({
    grade <- finalGrade()
    span(grade, style = "color: green; font-size: 24px;")
  })
  
  output$letterGrade <- renderUI({
    grade <- finalGrade()
    if (grade >= 92) {
      span("A", style = "color: green; font-size: 24px;")
    } else if (grade >= 89.5) {
      span("A-", style = "color: lightgreen; font-size: 24px;")
    } else if (grade >= 87) {
      span("B+", style = "color: yellowgreen; font-size: 24px;")
    } else if (grade >= 82) {
      span("B", style = "color: pink; font-size: 24px;")
    } else if (grade >= 79.5) {
      span("B-", style = "color: orange; font-size: 24px;")
    } else if (grade >= 77) {
      span("C+", style = "color: orangered; font-size: 24px;")
    } else if (grade >= 69.5) {
      span("C", style = "color: red; font-size: 24px;")
    } else if (grade >= 59.5) {
      span("D", style = "color: darkred; font-size: 24px;")
    } else {
      span("F", style = "color: darkred; font-size: 24px;")
    }
  })

  output$feedback <- renderUI({
    grade <- finalGrade()
    if (grade >= 92) {
      span("Excellent work!", style = "color: green; font-size: 20px;")
    } else if (grade >= 89.5) {
      span("Great job! Keep going.", style = "color: lightgreen; font-size: 20px;")
    } else {
      span("Good effort, keep improving.", style = "color: orange; font-size: 20px;")
    }
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```
